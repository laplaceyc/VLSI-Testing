#include <stdio.h>
#include <stdlib.h>
//compare A equal to B or not
bool compare(int *A, int *B){
	for(int i = 0; i < 8; i++){
		if(A[i] != B[i]) return false;
	}
	return true;
}
//judge visit before or not
bool judge(int A, bool *V){
	if(V[A] == true) return false;
	else{//visit[A] hasn't visited before
		V[A] = true;
		return true;
	}
}
// convert bin to dec
int bin_dec(int *A){
	int sum = 0;
	for(int i = 0; i < 8; i++){
		sum += (A[i] << i);
	}
	return sum;
}

int main(){
	//companion matrix generated by characteristic polynomial
	int T[8][8] = {{ 1, 0, 0, 0, 1, 1, 0, 1},
	               { 1, 0, 0, 0, 0, 0, 0, 0},
	               { 0, 1, 0, 0, 0, 0, 0, 0},
	               { 0, 0, 1, 0, 0, 0, 0, 0},
	               { 0, 0, 0, 1, 0, 0, 0, 0},
	               { 0, 0, 0, 0, 1, 0, 0, 0},
	               { 0, 0, 0, 0, 0, 1, 0, 0},
	               { 0, 0, 0, 0, 0, 0, 1, 0}};
				   
	//initial state	
	int I[8] = { 0, 0, 0, 0, 0, 0, 0, 1};
	//seed
	int Q[8] = { 0, 0, 0, 0, 0, 0, 0, 1};

	int Q_next[8];
	bool *visit = new bool[256]();
	printf("D1 D2 D3 D4 D5 D6 D7 D8\n");
	printf("-----------------------\n");
	int count = 0;
	do{	
		//Q+ = TQ
		for(int i = 0; i < 8; i++){
			int sum = 0;
			for(int j = 0; j < 8; j++) sum = sum ^ (T[i][j] * Q[j]);
			Q_next[i] = sum;
		}
		
		count++;
		for(int i = 0; i < 8; i++) printf(" %d ",Q_next[i]);
		printf("\n");
		
		//return true if Q_next if equal to I
		bool equal = compare(Q_next, I);
		if(equal == true) break;
		
		for(int i = 0; i < 8; i++) Q[i] = Q_next[i];
		
	}while(judge(bin_dec(Q_next) , visit));

	printf("count: %d\n", count);
	
}